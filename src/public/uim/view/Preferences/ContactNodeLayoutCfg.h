/* UOL Messenger
 * Copyright (c) 2005 Universo Online S/A
 *
 * Direitos Autorais Reservados
 * All rights reserved
 *
 * Este programa é software livre; você pode redistribuí-lo e/ou modificá-lo
 * sob os termos da Licença Pública Geral GNU conforme publicada pela Free
 * Software Foundation; tanto a versão 2 da Licença, como (a seu critério)
 * qualquer versão posterior.
 * Este programa é distribuído na expectativa de que seja útil, porém,
 * SEM NENHUMA GARANTIA; nem mesmo a garantia implícita de COMERCIABILIDADE
 * OU ADEQUAÇÃO A UMA FINALIDADE ESPECÍFICA. Consulte a Licença Pública Geral
 * do GNU para mais detalhes. 
 * Você deve ter recebido uma cópia da Licença Pública Geral do GNU junto
 * com este programa; se não, escreva para a Free Software Foundation, Inc.,
 * no endereço 59 Temple Street, Suite 330, Boston, MA 02111-1307 USA. 
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License
 * as published by the Free Software Foundation; either version 2
 * of the License, or (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 *
 * Universo Online S/A - A/C: UOL Messenger 5o. Andar
 * Avenida Brigadeiro Faria Lima, 1.384 - Jardim Paulistano
 * São Paulo SP - CEP 01452-002 - BRASIL  */

#pragma once

using namespace WTL;

/////////////////////////////////////////////////
// UTILS
//Custom cursors for drag operations
const BYTE ANDmaskDrop[] = 
{ 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xf7, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xff, 
	0xf1, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 
	0xf0, 0x7f, 0xff, 0xff, 0xf0, 0x3f, 0xff, 0xff, 
	0xf0, 0x1f, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 
	0xf0, 0x07, 0xff, 0xff, 0xf0, 0x03, 0xff, 0xff, 
	0xf0, 0x01, 0xff, 0xff, 0xf0, 0x00, 0xff, 0xff, 
	0xf0, 0x0f, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 
	0xf1, 0x87, 0xff, 0xff, 0xf3, 0x87, 0xff, 0xff, 
	0xf7, 0xc3, 0xff, 0xff, 0xff, 0xc3, 0xff, 0xff, 
	0xfd, 0x41, 0x5f, 0xff, 0xfe, 0xa0, 0xbf, 0xff, 
	0xfd, 0xf3, 0xdf, 0xff, 0xfe, 0xff, 0xbf, 0xff, 
	0xfd, 0xff, 0xdf, 0xff, 0xfe, 0xff, 0xbf, 0xff, 
	0xfd, 0xff, 0xdf, 0xff, 0xfe, 0xaa, 0xbf, 0xff, 
	0xfd, 0x55, 0x5f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};

const BYTE XORmaskDrop[] = 
{ 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x04, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 
	0x07, 0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 
	0x07, 0xc0, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 
	0x07, 0xf0, 0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 
	0x07, 0xfc, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 
	0x07, 0x60, 0x00, 0x00, 0x06, 0x60, 0x00, 0x00, 
	0x04, 0x30, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 
	0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 
	0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const BYTE ANDmaskDelete[] = 
{ 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xf7, 0xff, 0xff, 0xff, 0xf3, 0xff, 0xff, 0xff, 
	0xf1, 0xff, 0xff, 0xff, 0xf0, 0xff, 0xff, 0xff, 
	0xf0, 0x7f, 0xff, 0xff, 0xf0, 0x3f, 0xff, 0xff, 
	0xf0, 0x1f, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 
	0xf0, 0x07, 0xff, 0xff, 0xf0, 0x03, 0xff, 0xff, 
	0xf0, 0x01, 0xff, 0xff, 0xf0, 0x00, 0xff, 0xff,
	0xf0, 0x0f, 0xff, 0xff, 0xf0, 0x0f, 0xff, 0xff, 
	0xf1, 0x87, 0xff, 0xff, 0xf3, 0x87, 0xff, 0xff, 
	0xf7, 0xc3, 0xff, 0xff, 0xff, 0xc3, 0xff, 0xff, 
	0xfd, 0x41, 0x5f, 0xff, 0xfe, 0xa0, 0x00, 0x7f, 
	0xfd, 0xf0, 0x00, 0x7f, 0xfe, 0xfc, 0x00, 0x7f, 
	0xfd, 0xfc, 0x00, 0x7f, 0xfe, 0xfc, 0x00, 0x7f, 
	0xfd, 0xfc, 0x00, 0x7f, 0xfe, 0xa8, 0x00, 0x7f, 
	0xfd, 0x54, 0x00, 0x7f, 0xff, 0xfc, 0x00, 0x7f, 
	0xff, 0xfc, 0x00, 0x7f, 0xff, 0xfc, 0x00, 0x7f
};

const BYTE XORmaskDelete[] = 
{ 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x04, 0x00, 0x00, 0x00, 0x06, 0x00, 0x00, 0x00, 
	0x07, 0x00, 0x00, 0x00, 0x07, 0x80, 0x00, 0x00, 
	0x07, 0xc0, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 
	0x07, 0xf0, 0x00, 0x00, 0x07, 0xf8, 0x00, 0x00, 
	0x07, 0xfc, 0x00, 0x00, 0x07, 0xe0, 0x00, 0x00, 
	0x07, 0x60, 0x00, 0x00, 0x06, 0x60, 0x00, 0x00, 
	0x04, 0x30, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 
	0x00, 0x18, 0x00, 0x00, 0x00, 0x18, 0x00, 0x00, 
	0x00, 0x0c, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 
	0x00, 0x01, 0xff, 0x00, 0x00, 0x01, 0xff, 0x00, 
	0x00, 0x01, 0xff, 0x00, 0x00, 0x01, 0xff, 0x00, 
	0x00, 0x01, 0x83, 0x00, 0x00, 0x01, 0xff, 0x00, 
	0x00, 0x01, 0xff, 0x00, 0x00, 0x01, 0xff, 0x00, 
	0x00, 0x01, 0xff, 0x00, 0x00, 0x00, 0x00, 0x00
};

const BYTE ANDmaskNoDrop[] = 
{ 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xf8, 0x1f, 0xff, 0xff, 0xe0, 0x07, 0xff, 
	0xff, 0xc0, 0x03, 0xff, 0xff, 0x80, 0x01, 0xff, 
	0xff, 0x03, 0xc0, 0xff, 0xfe, 0x03, 0xf0, 0x7f, 
	0xfe, 0x01, 0xf8, 0x7f, 0xfc, 0x00, 0xf8, 0x3f, 
	0xfc, 0x30, 0x7c, 0x3f, 0xfc, 0x38, 0x3c, 0x3f, 
	0xfc, 0x3c, 0x1c, 0x3f, 0xfc, 0x3e, 0x0c, 0x3f, 
	0xfc, 0x1f, 0x00, 0x3f, 0xfe, 0x1f, 0x80, 0x7f, 
	0xfe, 0x0f, 0xc0, 0x7f, 0xff, 0x03, 0xe0, 0xff, 
	0xff, 0x80, 0x01, 0xff, 0xff, 0xc0, 0x03, 0xff, 
	0xff, 0xe0, 0x07, 0xff, 0xff, 0xf8, 0x1f, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff
};
 
const BYTE XORmaskNoDrop[] = 
{
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x07, 0xe0, 0x00, 0x00, 0x18, 0x18, 0x00, 
	0x00, 0x20, 0x04, 0x00, 0x00, 0x43, 0xc2, 0x00, 
	0x00, 0x8c, 0x31, 0x00, 0x01, 0x04, 0x08, 0x80, 
	0x01, 0x22, 0x04, 0x80, 0x02, 0x31, 0x04, 0x40, 
	0x02, 0x48, 0x82, 0x40, 0x02, 0x44, 0x42, 0x40, 
	0x02, 0x42, 0x22, 0x40, 0x02, 0x41, 0x12, 0x40, 
	0x02, 0x20, 0x8c, 0x40, 0x01, 0x20, 0x44, 0x80, 
	0x01, 0x10, 0x20, 0x80, 0x00, 0x8c, 0x11, 0x00, 
	0x00, 0x43, 0xe2, 0x00, 0x00, 0x20, 0x04, 0x00, 
	0x00, 0x18, 0x18, 0x00, 0x00, 0x07, 0xe0, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};

const enum 
{
	WM_TOOLBAR_DROP		= WM_USER + 0x0400,
	WM_TOOLBAR_ADD		= WM_USER + 0x0401,
	WM_TOOLBAR_INSERT	= WM_USER + 0x0402,
	WM_LISTBOX_DROP		= WM_USER + 0x0403
};

/////////////////////////////////////////////////
// CContactNodeLayoutElement
class CContactNodeLayoutElement
{
public:
	CContactNodeLayoutElement(void);
	virtual ~CContactNodeLayoutElement(void);
	void SetCaption(CString caption);
	CString GetCaption(void);
	void SetBitmapPath(CString bmpPath);
	CString GetBitmapPath(void);
    void SetBitmapIndex(int bmpIndex);
    int GetBitmapIndex(void);
	void SetFixed(BOOL fixed);
	BOOL IsFixed(void);
	void SetID(int id);
	int GetID(void);
	LPTBBUTTON GetToolBartButton(void);

private:
	CString     m_caption;	        //Caption of the element
    CString     m_strBitmapPath;    //Bitmap file path
	BOOL	    m_fixed;	        //Defines if element is fixed and can't be deleted from toolbar
	int		    m_id;		        //Defines internal ID
    int         m_bitmapIndex;      //Bitmap index
	TBBUTTON	m_toolbarButton;    //Toolbar button structure
};
MAKEAUTOPTR(CContactNodeLayoutElement);

/////////////////////////////////////////////////
// CToolBarCtrlHelper
class CToolBarCtrlHelper : public CWindowImpl<CToolBarCtrlHelper, WTL::CToolBarCtrl>
{
public:
	CToolBarCtrlHelper(void);
	virtual ~CToolBarCtrlHelper(void);
	void DeleteAllButtons(void);
    void AddElement(int id, BOOL fixed);
	int	GetButtonID(int button);

	DECLARE_WND_CLASS("CToolBarCtrlHelper");

protected:
	BEGIN_MSG_MAP(CListBoxCtrlHelper)
		MESSAGE_HANDLER(WM_LBUTTONUP, OnLButtonUp)
		MESSAGE_HANDLER(WM_LBUTTONDOWN, OnLButtonDown)
		MSG_WM_MOUSEMOVE(OnMouseMove)
	END_MSG_MAP()

private:
	int			m_nLastButton;
	int			m_nDragButton;
	int			m_nListIndex;
	BOOL		m_bDragCursor;
	BOOL		m_bDeleteCursor;
	BOOL		m_bNoDragCursor;
	BOOL		m_bCanDelete;
	BOOL		m_bDragging;
	CPoint		m_ptDrop;
	HCURSOR		m_hOrigCursor;
	HCURSOR		m_hDragCursor;
	HCURSOR		m_hNoDragCursor;
	HCURSOR		m_hDeleteCursor;
	UINT		m_uTimerEvent;
	CRect		m_lastRect;
    CAtlMap<int, BOOL> m_elements;
			
	LRESULT OnLButtonUp(UINT uMsg, WPARAM wParam, LPARAM lParam, BOOL& bHandled);
	LRESULT OnLButtonDown(UINT uMsg, WPARAM wParam, LPARAM lParam, BOOL& bHandled);
	int		FindDropButton(CPoint& point);
	void	OnMouseMove(UINT nFlags, CPoint point);	
	void	GetMarkerRect(int nButton, CRect& rc);
	void	ShowMarker(CRect& rcMarker, CBitmap& bmpArea);
	void	RestoreMarker(CRect& rcArea, CBitmap& bmpArea);
	void	SetMarker(CPoint&);
	void	BeginDrag(void);
	void	DragMove(void);
	void	EndDrag(BOOL bDoMove);
	void	RemoveSeparators(void);
	void	InvalidateButton(int nIndex);
	BOOL	IsSeparator(int iBtn);
	BOOL	IsValidDropTarget(CWindow* pWnd);
	BOOL	IsValidDeleteTarget(CWindow* pWnd);
    BOOL    IsElementFixed(int id);
};

/////////////////////////////////////////////////
// CListBoxCtrlHelper
class CListBoxCtrlHelper :	public CWindowImpl<CListBoxCtrlHelper, CListBox>
{
public:
	CListBoxCtrlHelper(void);
	virtual ~CListBoxCtrlHelper(void);

	DECLARE_WND_CLASS("CListBoxCtrlHelper");

protected:
	BEGIN_MSG_MAP(CListBoxCtrlHelper)
		MSG_WM_LBUTTONDOWN(OnLButtonDown)
		MSG_WM_LBUTTONUP(OnLButtonUp)
		MSG_WM_MOUSEMOVE(OnMouseMove)
	END_MSG_MAP()

private:
	int		m_nLastItem;
	int		m_nDragItem;
	int		m_nListIndex;
	BOOL	m_bDragCursor;
	BOOL	m_bDragging;
	CPoint	m_ptDrop;
	HCURSOR	m_hOrigCursor;
	HCURSOR	m_hDragCursor;
	HCURSOR	m_hNoDragCursor;
	UINT	m_uTimerEvent;
	CRect	m_lastRect;

	void	OnLButtonUp(UINT nFlags, CPoint point);
	void	OnLButtonDown(UINT nFlags, CPoint point);
	void	OnMouseMove(UINT nFlags, CPoint point);
	void	BeginDrag(void);
	void	EndDrag(BOOL bDoMove);
	void	DragMove(void) ;
	BOOL	IsValidDropTarget(CWindow* pWnd);
};

/////////////////////////////////////////////////
//CContactNodeLayoutCfg
class CContactNodeLayoutCfg: public CWindowImpl<CContactNodeLayoutCfg>
{
public:
	CContactNodeLayoutCfg(void);
	virtual ~CContactNodeLayoutCfg(void);	
	void AddElement(int id, CString caption, CString bmpPath, BOOL fixed);
	void CreateControls();
    void SetContactNodeLayout(CString layout);
    CString GetContactNodeLayout(void);
	BOOL PreTranslateMessage(MSG* pMsg);

    DECLARE_WND_CLASS("CContactNodeLayoutCfg");

public:
    enum
	{
		WM_CONTACT_NODE_LAYOUT_CHANGED = WM_USER + 0x0404
	};	
	
protected:
	BEGIN_MSG_MAP(CContactNodeLayoutCfg)
		MESSAGE_HANDLER(WM_TOOLBAR_DROP, OnToolBarDrop)
		MESSAGE_HANDLER(WM_TOOLBAR_ADD, OnToolBarAdd)
		MESSAGE_HANDLER(WM_TOOLBAR_INSERT, OnToolBarInsert)
		MESSAGE_HANDLER(WM_LISTBOX_DROP, OnListBoxDrop)		
	END_MSG_MAP()

private:
	CAtlList<CContactNodeLayoutElementPtr> m_elements;
	CToolBarCtrlHelper	m_toolbar;	
	CListBoxCtrlHelper	m_listbox;
    CImageList	        m_ilButtons;
    int                 m_bitmapIndex;

	CContactNodeLayoutElementPtr FindElement(int id);
    LRESULT OnToolBarDrop(UINT uMsg, WPARAM wParam, LPARAM lParam, BOOL& bHandled);
	LRESULT OnToolBarAdd(UINT uMsg, WPARAM wParam, LPARAM lParam, BOOL& bHandled);
	LRESULT OnToolBarInsert(UINT uMsg, WPARAM wParam, LPARAM lParam, BOOL& bHandled);
	LRESULT OnListBoxDrop(UINT uMsg, WPARAM wParam, LPARAM lParam, BOOL& bHandled);
};